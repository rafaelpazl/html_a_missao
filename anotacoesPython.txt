Números inteiros: int = 7  -4 9899
Números com ponto: float = 7.9 2.0 9.987 
bool = True False
str = 'Olá, mundo' '' '7.9' 'L7'

Nova forma de utilizar o print:
print('Agaragã bitch {}'.format(PONHO O QUE QUERO DENTRO DO PARENTESES E IRÁ PARA AS CHAVES))

ORDEM DE PRECEDÊNCIA
1°- () (cochetes)
2°- ** (potênciação)
3°- * / // % (multiplicação, divisão, divisor inteiro, resto da divisão)
4°- + - (mais, menos)

len(frase) #Resulta em: contar o comprimento da str.
frase.count('o') #Resulta em: contar quantas vezes o caractere aparece na str.
frase.find('deo') #Procura os caracteres escolhidos na str e mostra a posição do caractere.
frase.replace('a, b') #Substitui a por b na str.
frase.upper() #Para tornar os caracteres da str maiúsculas.
frase.lower() #Para tornar os caracteres da str minúsculas.
frase.capitalize() #Torna a apenas o primeiro caractere maiúsculo.
frase.title() #Torna MAIÚSCULAS as inicias das palavras depois de um (' '),<->"ESPAÇO"
frase.strip() #Remove todos os espaços inúteis antes e depois da str.
#posso adicionar .r ou .l antes do comando para específicar onde ele deve autar. 
Ex (frase.rstrip), ele irá remover apenas os espaços vazios do lado direito da str.
frase.split() #divide a str atravéz dos espaços utilizados.
" ".join(frase) #junta a str.
lista.append('item') #Adiciona um item a lista.
lista.insert(position,'item') #Seleciona a posição em que o item será adicionado.
del lista[position] or lista.pop(position) #para remover um item utilizando sua posição.
lista.remove('item') #Para remover um item da lista utilizando o próprio item.
lista.sort() #Para ordenar a lista de forma crescente.
lista.sort(reverse=True) #Para ordenar a lista de forma decrescente. 
se carro.esquerda():
	bloco __V__
senão
	bloco __F__ 
____________________

if car.left():
	bloco True
else:
	bloco False

CORES NO PYTHON:

    STYLE        TEXT BACK
0 - NONE          30   40 - BRANCO 
1 - BOLD          31   41 - VERMELHO
2 - UNDERLINE     32   42 - VERDE
3 - NEGATIVE      33   43 - AMARELO
                  34   44 - AZUL
EX:\033[0;33;34m  35   45 - LILÁS
                  36   46 - CIANO
                  37   47 - CINZA
enquanto não maçã
	passo
pega
------------------
while not apple:
	passo
pega

pos = 0
while pos < len(lista): #Para utilizar o pos do 0 até a ultima posição da lista.

ALINHAMENTO DE STR SEM FORMAT:
print((f'{variavel:<4} la la la...))

DICIONÁRIO:

filme.dict() # cria um dicionário.
filme = {'titulo':'Star Wars','ano':1977,'diretor':'George Lucas'} 
filme.values()# Seleciona os dados do dicionário.
filme.keys() # Seleciona as descrições dos dados.
filme.items() # Para selecionar os dados e as descrições.
filme.copy() # Para fazer uma cópia dos dados.
sum(partidas) # Soma os itens da lista.

DOCSTRING: AUXILIA INSTRUINDO O USUÁRIO QUE UTILIZA O PROGRAMA. DETALHA O FUNCIONAMENTO DE UMA FUNÇÃO PARA O INDIVÍDUO QUE O UTILIZA.
DIGITAR: ''' ''' LOGO ABAIXO DA FUNÇÃO def PARA PREENCHER A DOCTRING.

PARÂMETROS OPICIONAIS:
def somar (a, b, c):
	s = a + b + c
	print(s)

somar(a, b)

#daria erro

def somar (a, b, c = 0):
	s = a + b + c
	print(s)

somar(a, b)

#Parâmetro opcional. Se o valor não for informado, é substituído por 0.

TRATAMENTO DE ERRO E EXCEÇÕES:

try:
	operation
except TypeError, ValueError, ZeroDivisionError, KeyboardInterrupt:
	error
except Exception as erro:
	erro.__class__
else:
	all right
finally:
	right or error

MANIPULANDO ARQUIVOS:

CHARACTER	MEANING
'r'		Leitura
'w'		Escrita. Substitui o conteúdo do arquivo existente.
'x'		Escrita. Retorna um erro caso o arquivo já exista.
'a'		Escrita. Insere os novos dados no final do arquivo.
'b'		Modo binário.
't'		Modo de texto (padrão).
'+'		Atualizar. Tanto leitura quanto escrita.

funtion With:
O comando with serve para facilitar a escrita de qualquer bloco de código que envolva recursos que precisam ser "finalizados" (isso é, restaurados, liberados, fechados, etc... ) depois que o bloco for encerrado - e ele permite que isso seja feito de forma automática, com a lógica de finalização dentro do objeto utilizado.
